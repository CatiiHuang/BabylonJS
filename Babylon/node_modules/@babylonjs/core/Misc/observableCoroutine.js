import { Observable } from "./observable";
Observable.prototype.runCoroutineAsync = function (coroutineIterator) {
    var _this = this;
    if (!this.coroutineIterators) {
        this.coroutineIterators = [];
        this.add(function () {
            var _loop_1 = function (idx) {
                if (_this.coroutineIterators[idx].paused) {
                    return "continue";
                }
                var next = _this.coroutineIterators[idx].iterator.next();
                if (next.value) {
                    var coroutine_1 = _this.coroutineIterators[idx];
                    coroutine_1.paused = true;
                    next.value.then(function () {
                        coroutine_1.paused = false;
                    });
                }
                if (next.done) {
                    _this.coroutineIterators[idx].resolver();
                    _this.coroutineIterators.splice(idx, 1);
                }
            };
            for (var idx = _this.coroutineIterators.length - 1; idx >= 0; --idx) {
                _loop_1(idx);
            }
        });
    }
    return new Promise(function (resolver, rejecter) {
        var _a;
        (_a = _this.coroutineIterators) === null || _a === void 0 ? void 0 : _a.push({
            iterator: coroutineIterator,
            resolver: resolver,
            rejecter: rejecter,
            paused: false
        });
    });
};
Observable.prototype.cancelAllCoroutines = function () {
    this.coroutineIterators.forEach(function (coroutine) {
        coroutine.rejecter();
    });
    this.coroutineIterators = [];
};
//# sourceMappingURL=observableCoroutine.js.map