{"version":3,"file":"observableCoroutine.js","sourceRoot":"","sources":["../../../sourceES6/core/Misc/observableCoroutine.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAuB1C,UAAU,CAAC,SAAS,CAAC,iBAAiB,GAAG,UAAU,iBAA6D;IAAvE,iBAoCxC;IAnCG,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;QAC1B,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC,GAAG,CAAC;oCACI,GAAG;gBACR,IAAI,KAAI,CAAC,kBAAmB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE;;iBAEzC;gBAED,IAAM,IAAI,GAAG,KAAI,CAAC,kBAAmB,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAE3D,IAAI,IAAI,CAAC,KAAK,EAAE;oBACZ,IAAM,WAAS,GAAG,KAAI,CAAC,kBAAmB,CAAC,GAAG,CAAC,CAAC;oBAChD,WAAS,CAAC,MAAM,GAAG,IAAI,CAAC;oBACxB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;wBACZ,WAAS,CAAC,MAAM,GAAG,KAAK,CAAC;oBAC7B,CAAC,CAAC,CAAC;iBACN;gBAED,IAAI,IAAI,CAAC,IAAI,EAAE;oBACX,KAAI,CAAC,kBAAmB,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;oBACzC,KAAI,CAAC,kBAAmB,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;iBAC3C;;YAlBL,KAAK,IAAI,GAAG,GAAG,KAAI,CAAC,kBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,GAAG;wBAA1D,GAAG;aAmBX;QACL,CAAC,CAAC,CAAC;KACN;IAED,OAAO,IAAI,OAAO,CAAC,UAAC,QAAQ,EAAE,QAAQ;;QAClC,MAAA,KAAI,CAAC,kBAAkB,0CAAE,IAAI,CAAC;YAC1B,QAAQ,EAAE,iBAAiB;YAC3B,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE,KAAK;SAChB,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,UAAU,CAAC,SAAS,CAAC,mBAAmB,GAAG;IACvC,IAAI,CAAC,kBAAmB,CAAC,OAAO,CAAC,UAAC,SAAS;QACvC,SAAS,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;AACjC,CAAC,CAAC","sourcesContent":["import { Nullable } from \"../types\";\r\nimport { Observable } from \"./observable\";\r\n\r\ndeclare module \"./observable\" {\r\n    export interface Observable<T> {\r\n        /**\r\n         * Internal list of iterators and promise resolvers associated with coroutines.\r\n         */\r\n        coroutineIterators: Nullable<Array<{ iterator: Iterator<void | Promise<void>, void, void>, resolver: () => void, rejecter: () => void, paused: boolean }>>;\r\n\r\n        /**\r\n         * Runs a coroutine asynchronously on this observable\r\n         * @param coroutineIterator the iterator resulting from having started the coroutine\r\n         * @returns a promise which will be resolved when the coroutine finishes or rejected if the coroutine is cancelled\r\n         */\r\n        runCoroutineAsync(coroutineIterator: Iterator<void | Promise<void>, void, void>): Promise<void>;\r\n\r\n        /**\r\n         * Cancels all coroutines currently running on this observable\r\n         */\r\n        cancelAllCoroutines(): void;\r\n    }\r\n}\r\n\r\nObservable.prototype.runCoroutineAsync = function (coroutineIterator: Iterator<void | Promise<void>, void, void>): Promise<void> {\r\n    if (!this.coroutineIterators) {\r\n        this.coroutineIterators = [];\r\n\r\n        this.add(() => {\r\n            for (let idx = this.coroutineIterators!.length - 1; idx >= 0; --idx) {\r\n                if (this.coroutineIterators![idx].paused) {\r\n                    continue;\r\n                }\r\n\r\n                const next = this.coroutineIterators![idx].iterator.next();\r\n\r\n                if (next.value) {\r\n                    const coroutine = this.coroutineIterators![idx];\r\n                    coroutine.paused = true;\r\n                    next.value.then(() => {\r\n                        coroutine.paused = false;\r\n                    });\r\n                }\r\n\r\n                if (next.done) {\r\n                    this.coroutineIterators![idx].resolver();\r\n                    this.coroutineIterators!.splice(idx, 1);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return new Promise((resolver, rejecter) => {\r\n        this.coroutineIterators?.push({\r\n            iterator: coroutineIterator,\r\n            resolver: resolver,\r\n            rejecter: rejecter,\r\n            paused: false\r\n        });\r\n    });\r\n};\r\n\r\nObservable.prototype.cancelAllCoroutines = function (): void {\r\n    this.coroutineIterators!.forEach((coroutine) => {\r\n        coroutine.rejecter();\r\n    });\r\n    this.coroutineIterators = [];\r\n};\r\n"]}