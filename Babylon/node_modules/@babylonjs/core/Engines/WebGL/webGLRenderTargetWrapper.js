import { __extends } from "tslib";
import { RenderTargetWrapper } from "../renderTargetWrapper";
/** @hidden */
var WebGLRenderTargetWrapper = /** @class */ (function (_super) {
    __extends(WebGLRenderTargetWrapper, _super);
    function WebGLRenderTargetWrapper(isMulti, isCube, size, engine, context) {
        var _this = _super.call(this, isMulti, isCube, size, engine) || this;
        _this._framebuffer = null;
        _this._depthStencilBuffer = null;
        _this._MSAAFramebuffer = null;
        // Multiview
        _this._colorTextureArray = null;
        _this._depthStencilTextureArray = null;
        _this._context = context;
        return _this;
    }
    WebGLRenderTargetWrapper.prototype._cloneRenderTargetWrapper = function () {
        var rtw = null;
        if (this._colorTextureArray && this._depthStencilTextureArray) {
            rtw = this._engine.createMultiviewRenderTargetTexture(this.width, this.height);
            rtw.texture.isReady = true;
        }
        else {
            rtw = _super.prototype._cloneRenderTargetWrapper.call(this);
        }
        return rtw;
    };
    WebGLRenderTargetWrapper.prototype._swapRenderTargetWrapper = function (target) {
        _super.prototype._swapRenderTargetWrapper.call(this, target);
        target._framebuffer = this._framebuffer;
        target._depthStencilBuffer = this._depthStencilBuffer;
        target._MSAAFramebuffer = this._MSAAFramebuffer;
        target._colorTextureArray = this._colorTextureArray;
        target._depthStencilTextureArray = this._depthStencilTextureArray;
        this._framebuffer = this._depthStencilBuffer = this._MSAAFramebuffer = this._colorTextureArray = this._depthStencilTextureArray = null;
    };
    WebGLRenderTargetWrapper.prototype.dispose = function (disposeOnlyFramebuffers) {
        if (disposeOnlyFramebuffers === void 0) { disposeOnlyFramebuffers = false; }
        var gl = this._context;
        if (!disposeOnlyFramebuffers) {
            if (this._colorTextureArray) {
                this._context.deleteTexture(this._colorTextureArray);
                this._colorTextureArray = null;
            }
            if (this._depthStencilTextureArray) {
                this._context.deleteTexture(this._depthStencilTextureArray);
                this._depthStencilTextureArray = null;
            }
        }
        if (this._framebuffer) {
            gl.deleteFramebuffer(this._framebuffer);
            this._framebuffer = null;
        }
        if (this._depthStencilBuffer) {
            gl.deleteRenderbuffer(this._depthStencilBuffer);
            this._depthStencilBuffer = null;
        }
        if (this._MSAAFramebuffer) {
            gl.deleteFramebuffer(this._MSAAFramebuffer);
            this._MSAAFramebuffer = null;
        }
        _super.prototype.dispose.call(this, disposeOnlyFramebuffers);
    };
    return WebGLRenderTargetWrapper;
}(RenderTargetWrapper));
export { WebGLRenderTargetWrapper };
//# sourceMappingURL=webGLRenderTargetWrapper.js.map